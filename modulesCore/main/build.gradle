def cfg = rootProject.ext

//plugins {
//    id 'com.android.application'
//    id 'org.jetbrains.kotlin.android'
//}
// 这里改用apply plugin的方式是为了让module可以在library和application间切换
if (cfg.isDebug) {   //是debug模式才是application，不是debug则为library
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

android {
    compileSdk cfg.android.compileSdkVersion

    defaultConfig {
        if (cfg.isDebug) {    //debug模式下是application,才会有applicationId
            applicationId cfg.applicationId.main   //这里是main module所以引用main
        }
        minSdk cfg.android.minSdkVersion
        targetSdk cfg.android.targetSdkVersion
        versionCode cfg.android.versionCode
        versionName cfg.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 引入注解处理器后需添加AROUTER_MODULE_NAME
        // java版本
//        javaCompileOptions {
//            annotationProcessorOptions {
//                //arouter编译的时候需要的module名字
//                arguments = [AROUTER_MODULE_NAME: project.name]
//            }
//        }
        // kt版本
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.name)
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // application/library -不同情况使用不同的AndroidManifest.xml
    sourceSets {
        main {
            if (cfg.isDebug) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }
}

dependencies {

    // 业务组件会依赖基础组件，所以直接引入基础组件
    // implementation和api的区别: implementation依赖不可以向上级传递，api可传递
    implementation project(":modulesBase:libBase")
    kapt cfg.libARouterCompiler   // 需要用到ARouter的业务组件需要引入注解处理器

//    implementation 'androidx.core:core-ktx:1.7.0'
//    implementation 'androidx.appcompat:appcompat:1.6.0'
//    implementation 'com.google.android.material:material:1.7.0'
//    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}